name: Infra (CDK)

on:
  workflow_dispatch:
    inputs:
      env:
        description: 'Environment (e.g., dev, stg, prod)'
        required: true
        default: 'dev'
      app_name:
        description: 'Stack app name (e.g., core-apis)'
        required: true
        default: 'core-apis'
      region:
        description: 'AWS region'
        required: true
        default: 'eu-west-1'
      create_oidc:
        description: 'Also create GitHub OIDC role stack? (true/false)'
        required: false
        default: 'false'

env:
  ENV: ${{ inputs.env }}
  APP_NAME: ${{ inputs.app_name }}
  AWS_REGION: ${{ inputs.region }}
  CREATE_OIDC: ${{ inputs.create_oidc }}

concurrency:
  group: infra-${{ github.workflow }}-${{ inputs.env }}-${{ inputs.app_name }}
  cancel-in-progress: false

jobs:
  cdk:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Preflight – ensure AWS_DEPLOY_ROLE_ARN is set
        run: |
          if [ -z "${{ secrets.AWS_DEPLOY_ROLE_ARN }}" ]; then
            echo "::error::Missing repo secret AWS_DEPLOY_ROLE_ARN (IAM role ARN for OIDC)."
            exit 1
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install deps (CDK + project)
        run: |
          set -e
          if [ -f pnpm-lock.yaml ]; then
            corepack enable
            corepack prepare pnpm@latest --activate
            pnpm install --frozen-lockfile
          elif [ -f package-lock.json ]; then
            npm ci
          else
            echo "::warning::No lockfile found (pnpm-lock.yaml or package-lock.json). Using 'npm install'."
            npm install
          fi

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Resolve Account ID
        id: acct
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)
          echo "account_id=$ACCOUNT_ID" >> $GITHUB_OUTPUT

      - name: Ensure CDK is bootstrapped (idempotent)
        run: |
          set -euo pipefail
          if aws cloudformation describe-stacks --stack-name CDKToolkit --region "${AWS_REGION}" >/dev/null 2>&1; then
            echo "CDK already bootstrapped in ${AWS_REGION}"
          else
            echo "Bootstrapping CDK in ${AWS_REGION}…"
            npx cdk bootstrap aws://${{ steps.acct.outputs.account_id }}/${AWS_REGION} \
              --require-approval never
          fi

      - name: CDK synth (early fail if invalid)
        run: |
          npx cdk synth \
            -a "npx ts-node --transpile-only bin/app.ts" \
            -c env=${ENV} \
            -c appName=${APP_NAME} \
            -c region=${AWS_REGION}

      - name: Deploy Network
        run: |
          npx cdk deploy --require-approval never \
            "${ENV}-${APP_NAME}-network" \
            -c env=${ENV} -c appName=${APP_NAME} -c region=${AWS_REGION}

      - name: Deploy ECR
        run: |
          npx cdk deploy --require-approval never \
            "${ENV}-${APP_NAME}-ecr" \
            -c env=${ENV} -c appName=${APP_NAME} -c region=${AWS_REGION}

      - name: Deploy Service (initial; imageTag=latest)
        run: |
          npx cdk deploy --require-approval never \
            "${ENV}-${APP_NAME}-svc" \
            -c env=${ENV} -c appName=${APP_NAME} -c region=${AWS_REGION} \
            -c imageTag=latest

      - name: (Optional) Create OIDC role stack
        if: ${{ env.CREATE_OIDC == 'true' }}
        run: |
          npx cdk deploy --require-approval never \
            "${ENV}-${APP_NAME}-gh-oidc" \
            -c env=${ENV} -c appName=${APP_NAME} -c region=${AWS_REGION} \
            -c createOidc=true \
            -c githubOrg=${{ github.repository_owner }} \
            -c githubRepo=${{ github.event.repository.name }}

      - name: Collect outputs
        id: outs
        run: |
          set -euo pipefail
          ECR_URI=$(aws cloudformation describe-stacks --stack-name "${ENV}-${APP_NAME}-ecr" \
            --query "Stacks[0].Outputs[?OutputKey=='EcrRepoUri'].OutputValue" --output text)
          ALB_DNS=$(aws cloudformation describe-stacks --stack-name "${ENV}-${APP_NAME}-svc" \
            --query "Stacks[0].Outputs[?OutputKey=='LoadBalancerDNS'].OutputValue" --output text || true)
          echo "ecr_uri=$ECR_URI" >> $GITHUB_OUTPUT
          echo "alb_dns=$ALB_DNS" >> $GITHUB_OUTPUT

      - name: Summary
        run: |
          {
            echo "### Infra deployed ✅"
            echo ""
            echo "- **Env**: ${ENV}"
            echo "- **App**: ${APP_NAME}"
            echo "- **Region**: ${AWS_REGION}"
            echo "- **ECR Repo URI**: \`${{ steps.outs.outputs.ecr_uri }}\`"
            if [ -n "${{ steps.outs.outputs.alb_dns }}" ] && [ "${{ steps.outs.outputs.alb_dns }}" != "None" ]; then
              echo "- **ALB DNS**: http://${{ steps.outs.outputs.alb_dns }}"
            fi
          } >> $GITHUB_STEP_SUMMARY
