name: Deploy App (CDK)

on:
  workflow_dispatch: {} # manual runs
  push:
    branches: ['main'] # add 'develop', 'release/*', etc. if needed
    # During bring-up, avoid ignoring .github/** or this file won't trigger
    # paths-ignore:
    #   - 'docs/**'
    #   - 'README.md'

env:
  ENV: 'dev' # change per-branch or GitHub environments
  APP_NAME: 'core-apis'
  AWS_REGION: 'eu-west-1'

# Prevent overlapping deploys per env/app
concurrency:
  group: deploy-${{ env.ENV }}-${{ env.APP_NAME }}
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write # required for OIDC
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Preflight – ensure AWS_DEPLOY_ROLE_ARN exists
        run: |
          if [ -z "${{ secrets.AWS_DEPLOY_ROLE_ARN }}" ]; then
            echo "::error::Missing repo secret AWS_DEPLOY_ROLE_ARN (IAM role ARN for OIDC)."
            exit 1
          fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Optional caches (only used if a lockfile exists)
      - name: Cache pnpm store
        if: hashFiles('pnpm-lock.yaml') != ''
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-pnpm-

      - name: Cache npm
        if: hashFiles('package-lock.json') != ''
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}
          restore-keys: ${{ runner.os }}-npm-

      - name: Enable corepack (pnpm) if present
        run: corepack enable

      - name: Install + Build (+ Test if present, non-fatal)
        run: |
          set -e
          if [ -f pnpm-lock.yaml ]; then
            corepack prepare pnpm@latest --activate
            pnpm install --frozen-lockfile
            pnpm run build
            pnpm test --if-present || echo "(tests skipped or failing; continuing)"
          else
            if [ -f package-lock.json ]; then
              npm ci
            else
              echo "::warning::No lockfile found. Using 'npm install'."
              npm install
            fi
            npm run build
            npm run -s test --if-present || echo "(tests skipped or failing; continuing)"
          fi

      - name: Ensure Dockerfile exists (root)
        run: |
          test -f Dockerfile || (echo "::error::Dockerfile not found at repo root"; exit 1)

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify caller identity
        run: aws sts get-caller-identity

      # --- self-heal infra dependencies (so deploy works even if infra wasn't run) ---
      - name: Install CDK CLI deps
        run: |
          if [ -f pnpm-lock.yaml ]; then
            corepack enable
            corepack prepare pnpm@latest --activate
            pnpm install --frozen-lockfile
          elif [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Ensure CDK is bootstrapped (idempotent)
        run: |
          set -euo pipefail
          if aws cloudformation describe-stacks --stack-name CDKToolkit --region "${AWS_REGION}" >/dev/null 2>&1; then
            echo "CDK already bootstrapped in ${AWS_REGION}"
          else
            ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)
            echo "Bootstrapping CDK for ${ACCOUNT_ID}/${AWS_REGION}…"
            npx cdk bootstrap aws://$ACCOUNT_ID/${AWS_REGION} --require-approval never
          fi

      - name: Ensure Network & ECR stacks exist
        run: |
          set -euo pipefail
          for STACK in "${ENV}-${APP_NAME}-network" "${ENV}-${APP_NAME}-ecr"; do
            if aws cloudformation describe-stacks --stack-name "$STACK" >/dev/null 2>&1; then
              echo "::notice::$STACK exists."
            else
              echo "::notice::$STACK not found; deploying…"
              npx cdk deploy --require-approval never "$STACK" \
                -c env=${ENV} -c appName=${APP_NAME} -c region=${AWS_REGION}
            fi
          done
      # --- end self-heal ---
      - name: Get ECR URI (from ECR stack outputs)
        id: ecr
        run: |
          set -e
          REPO_URI=$(aws cloudformation describe-stacks --stack-name ${ENV}-${APP_NAME}-ecr \
            --query "Stacks[0].Outputs[?OutputKey=='EcrRepoUri'].OutputValue" --output text)
          echo "uri=$REPO_URI" >> $GITHUB_OUTPUT

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push Image (root Dockerfile)
        id: img
        env:
          ECR_URI: ${{ steps.ecr.outputs.uri }}
        run: |
          set -e
          TAG=${GITHUB_SHA::7}
          docker build --pull -t $ECR_URI:$TAG .
          docker push $ECR_URI:$TAG
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: CDK deploy service stack with new imageTag
        env:
          TAG: ${{ steps.img.outputs.tag }}
        run: |
          npx cdk deploy --require-approval never \
            "${ENV}-${APP_NAME}-svc" \
            -c env=${ENV} \
            -c appName=${APP_NAME} \
            -c region=${AWS_REGION} \
            -c imageTag=${TAG}

      - name: Fetch ALB DNS (summary)
        id: alb
        run: |
          ALB_DNS=$(aws cloudformation describe-stacks --stack-name "${ENV}-${APP_NAME}-svc" \
            --query "Stacks[0].Outputs[?OutputKey=='LoadBalancerDNS'].OutputValue" --output text || true)
          echo "dns=$ALB_DNS" >> $GITHUB_OUTPUT

      - name: Summary
        run: |
          {
            echo "### Deploy complete ✅"
            echo ""
            echo "- **Env**: ${ENV}"
            echo "- **App**: ${APP_NAME}"
            echo "- **Region**: ${AWS_REGION}"
            echo "- **Image tag**: \`${{ steps.img.outputs.tag }}\`"
            echo "- **ECR**: \`${{ steps.ecr.outputs.uri }}\`"
            if [ -n "${{ steps.alb.outputs.dns }}" ] && [ "${{ steps.alb.outputs.dns }}" != "None" ]; then
              echo "- **ALB**: http://${{ steps.alb.outputs.dns }}"
            fi
          } >> $GITHUB_STEP_SUMMARY
