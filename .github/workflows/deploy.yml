name: Deploy App (CDK)

on:
  workflow_dispatch: {} # <-- lets you run it manually from Actions
  push:
    branches: ['main'] # add 'develop', etc. if you need
    # During bring-up, DO NOT ignore .github/**, otherwise edits to this file won't trigger
    # paths-ignore:
    #   - 'infra/**'
    #   - 'docs/**'
    #   - 'README.md'

env:
  ENV: 'dev' # change per-branch or via environments
  APP_NAME: 'core-apis'
  AWS_REGION: 'eu-west-1'

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write # needed for OIDC
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Enable corepack (pnpm) if present
        run: corepack enable

      - name: Install + Build + Test (auto-detect pnpm/npm)
        run: |
          if [ -f pnpm-lock.yaml ]; then
            corepack prepare pnpm@latest --activate
            pnpm install --frozen-lockfile
            pnpm run build
            pnpm test --if-present
          else
            npm ci
            npm run build
            npm test --if-present
          fi

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get ECR URI (from ECR stack outputs)
        id: ecr
        run: |
          REPO_URI=$(aws cloudformation describe-stacks --stack-name ${ENV}-${APP_NAME}-ecr \
            --query "Stacks[0].Outputs[?OutputKey=='EcrRepoUri'].OutputValue" --output text)
          if [ -z "$REPO_URI" ] || [ "$REPO_URI" = "None" ]; then
            echo "ECR repo output not found. Did you run the Infra (CDK) workflow for ${ENV}-${APP_NAME}-ecr?"
            exit 1
          fi
          echo "uri=$REPO_URI" >> $GITHUB_OUTPUT

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push Image (root Dockerfile)
        id: img
        env:
          ECR_URI: ${{ steps.ecr.outputs.uri }}
        run: |
          TAG=${GITHUB_SHA::7}
          docker build -t $ECR_URI:$TAG .
          docker push $ECR_URI:$TAG
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Install CDK deps (service deploy)
        run: npm ci

      - name: CDK deploy service stack with new imageTag
        env:
          TAG: ${{ steps.img.outputs.tag }}
        run: |
          npx cdk deploy --require-approval never \
            "${ENV}-${APP_NAME}-svc" \
            -c env=${ENV} \
            -c appName=${APP_NAME} \
            -c region=${AWS_REGION} \
            -c imageTag=${TAG}
