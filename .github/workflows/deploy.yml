name: deploy
on:
  push:
    branches: [develop, main]
  workflow_dispatch: {}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    environment: ${{ github.ref_name == 'main' && 'prod' || 'dev' }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with: { node-version: 20 }

      - name: Enable pnpm
        run: corepack enable

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Resolve AWS identity
        id: aws
        run: |
          echo "account_id=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_OUTPUT

      - name: Derive environment flags
        id: derive
        run: |
          APP_NAME="${{ secrets.APP_NAME }}"
          if [ "${GITHUB_REF_NAME}" = "main" ]; then
            echo "env_name=prod" >> $GITHUB_OUTPUT
            echo "node_env=production" >> $GITHUB_OUTPUT
            echo "stack_id=${APP_NAME}-prod" >> $GITHUB_OUTPUT
            echo "log_level=info" >> $GITHUB_OUTPUT
            echo "ecr_repo=${APP_NAME}-prod" >> $GITHUB_OUTPUT
          else
            echo "env_name=dev" >> $GITHUB_OUTPUT
            echo "node_env=development" >> $GITHUB_OUTPUT
            echo "stack_id=${APP_NAME}-dev" >> $GITHUB_OUTPUT
            echo "log_level=debug" >> $GITHUB_OUTPUT
            echo "ecr_repo=" >> $GITHUB_OUTPUT
          fi

      - name: Compose env for deploy
        run: |
          mkdir -p infra
          cat > infra/.env.deploy <<EOF
          PORT=${{ secrets.PORT || 8080 }}
          NODE_ENV=${{ steps.derive.outputs.node_env }}
          LOG_LEVEL=${{ steps.derive.outputs.log_level }}

          ARGON2_MEMORY_COST=${{ secrets.ARGON2_MEMORY_COST || 2048 }}
          ARGON2_TIME_COST=${{ secrets.ARGON2_TIME_COST || 10 }}
          ARGON2_PARALLELISM=${{ secrets.ARGON2_PARALLELISM || 1 }}

          CERBOS_HOST=${{ secrets.CERBOS_HOST || 'cerbos' }}
          CERBOS_PORT=${{ secrets.CERBOS_PORT || 3592 }}
          CERBOS_TLS=${{ secrets.CERBOS_TLS || 'false' }}
          CERBOS_PLAYGROUND_INSTANCE=${{ secrets.CERBOS_PLAYGROUND_INSTANCE || '' }}
          CERBOS_ADMIN_USERNAME=${{ secrets.CERBOS_ADMIN_USERNAME || 'cerbos' }}

          AWS_REGION=${{ secrets.AWS_REGION }}
          URL=${{ secrets.URL || (github.ref_name == 'main' && 'https://api.example.com' || 'http://localhost:3000') }}

          REDIS_HOST=${{ secrets.REDIS_HOST || 'redis' }}
          REDIS_PORT=${{ secrets.REDIS_PORT || 6379 }}

          DB_HOST=${{ secrets.DB_HOST || 'postgres' }}
          DB_PORT=${{ secrets.DB_PORT || 5432 }}
          DB_USER=${{ secrets.DB_USER || 'postgres' }}
          DB_NAME=${{ secrets.DB_NAME || 'app' }}
          DB_SYNCHRONIZE=${{ secrets.DB_SYNCHRONIZE || 'false' }}
          DB_LOGGING=${{ secrets.DB_LOGGING || 'false' }}
          DB_TYPE=postgres
          DB_POOL_MAX=${{ secrets.DB_POOL_MAX || (github.ref_name == 'main' && 50 || 20) }}
          DB_POOL_MIN=${{ secrets.DB_POOL_MIN || (github.ref_name == 'main' && 2 || 1) }}
          DB_POOL_IDLE_TIMEOUT=${{ secrets.DB_POOL_IDLE_TIMEOUT || 30000 }}
          DB_POOL_ACQUIRE_TIMEOUT=${{ secrets.DB_POOL_ACQUIRE_TIMEOUT || 60000 }}
          DB_POOL_REAP_INTERVAL=${{ secrets.DB_POOL_REAP_INTERVAL || 1000 }}
          DB_POOL_CREATE_TIMEOUT=${{ secrets.DB_POOL_CREATE_TIMEOUT || 30000 }}
          DB_POOL_CREATE_RETRY_INTERVAL=${{ secrets.DB_POOL_CREATE_RETRY_INTERVAL || 200 }}
          DB_RETRY_ATTEMPTS=${{ secrets.DB_RETRY_ATTEMPTS || 5 }}
          DB_RETRY_DELAY=${{ secrets.DB_RETRY_DELAY || 3000 }}
          EOF
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> infra/.env.deploy
          echo "JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}" >> infra/.env.deploy
          echo "AT_API_KEY=${{ secrets.AT_API_KEY }}" >> infra/.env.deploy
          echo "CERBOS_ADMIN_PASSWORD=${{ secrets.CERBOS_ADMIN_PASSWORD }}" >> infra/.env.deploy
          echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> infra/.env.deploy

      - name: Install infra deps
        working-directory: infra
        run: |
          pnpm i
          pnpm build

      - name: CDK bootstrap
        working-directory: infra
        env:
          ACCOUNT_ID: ${{ steps.aws.outputs.account_id }}
        run: pnpm dlx cdk bootstrap aws://$ACCOUNT_ID/${{ secrets.AWS_REGION }}

      - name: Ensure ECR (prod only)
        if: ${{ steps.derive.outputs.env_name == 'prod' }}
        run: |
          aws ecr describe-repositories --repository-names "${{ steps.derive.outputs.ecr_repo }}" >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name "${{ steps.derive.outputs.ecr_repo }}" >/dev/null

      - name: Login to ECR (prod only)
        if: ${{ steps.derive.outputs.env_name == 'prod' }}
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & push image (prod only)
        if: ${{ steps.derive.outputs.env_name == 'prod' }}
        env:
          ACCOUNT_ID: ${{ steps.aws.outputs.account_id }}
        run: |
          REGISTRY="$ACCOUNT_ID.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com"
          IMAGE_TAG="${{ github.sha }}"
          docker build -t $REGISTRY/${{ steps.derive.outputs.ecr_repo }}:$IMAGE_TAG .
          docker push $REGISTRY/${{ steps.derive.outputs.ecr_repo }}:$IMAGE_TAG

      - name: Deploy
        working-directory: infra
        env:
          ENV_FILE: infra/.env.deploy
        run: |
          if [ "${GITHUB_REF_NAME}" = "main" ]; then
            pnpm cdk deploy core-apis-prod \
              -c ecrRepositoryName=${{ vars.APP_NAME }}-prod \
              -c imageTag=${{ github.sha }} \
              --require-approval never
          else
            pnpm cdk deploy core-apis-dev --require-approval never
          fi
