openapi: 3.1.0
info:
  title: Core APIs
  version: 1.0.0
  description: REST API for users, auth, organizations, and properties
servers:
  - url: http://localhost:8080/api/v1
    description: Local
  - url: https://api.example.com/api/v1
    description: Production
tags:
  - name: Auth
  - name: Users
  - name: Organizations
  - name: Org Memberships
  - name: Properties
  - name: Property Units
  - name: Locations
  - name: Address Components
  - name: Location-Address Links
  - name: Payments
  - name: Files
  - name: SMS
  - name: Maintenance
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
    AuthTokens:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
    AuthProfile:
      type: object
      properties:
        sub:
          type: string
        email:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        firstName:
          type: string
        lastName:
          type: string
        fullName:
          type: string
        organizationIds:
          type: array
          items:
            type: string
        organizations:
          type: array
          items:
            $ref: '#/components/schemas/Organization'
    User:
      type: object
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
    OrganizationType:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        description: { type: string, nullable: true }
        isActive: { type: boolean }

    Organization:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        type:
          oneOf:
            - $ref: '#/components/schemas/OrganizationType'
            - type: 'null'
        config:
          type: object
          nullable: true
        metadata:
          type: object
          nullable: true
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
        deletedAt: { type: string, format: date-time, nullable: true }
    OrganizationUserMembership:
      type: object
      properties:
        id:
          type: string
        organization:
          $ref: '#/components/schemas/Organization'
        user:
          $ref: '#/components/schemas/User'
        roles:
          type: array
          items:
            type: string
            enum: [owner, caretaker, general_staff, tenant, service_provider]
        status:
          type: string
          nullable: true

    Location:
      type: object
      properties:
        id: { type: string }
        localAreaName: { type: string }
        county: { type: string }
        town: { type: string, nullable: true }
        street: { type: string, nullable: true }
        coverageDetails: { type: string, nullable: true }
        centerPoint:
          anyOf:
            - type: object
              properties:
                type: { type: string, enum: [Point] }
                coordinates:
                  type: array
                  items: { type: number }
                  minItems: 2
                  maxItems: 2
            - type: 'null'
        geofence:
          anyOf:
            - type: object
              properties:
                type: { type: string, enum: [Polygon] }
                coordinates:
                  type: array
                  items:
                    type: array
                    items:
                      type: array
                      items: { type: number }
                      minItems: 2
            - type: 'null'
        metadata: { type: object, nullable: true }

    AddressComponent:
      type: object
      properties:
        id: { type: string }
        type: { type: string }
        value: { type: string }
        parentId: { type: string, nullable: true }
        metadata: { type: object, nullable: true }

    LocationAddressComponent:
      type: object
      properties:
        id: { type: string }
        location:
          $ref: '#/components/schemas/Location'
        addressComponent:
          $ref: '#/components/schemas/AddressComponent'
        label: { type: string, nullable: true }
        sequence: { type: integer, nullable: true }
        isPrimary: { type: boolean }
        centerPoint:
          anyOf:
            - type: object
              properties:
                type: { type: string, enum: [Point] }
                coordinates:
                  type: array
                  items: { type: number }
                  minItems: 2
                  maxItems: 2
            - type: 'null'

    OrganizationResponse:
      type: object
      properties:
        apiVersion: { type: string }
        kind: { type: string, enum: [ORGANIZATION] }
        data:
          $ref: '#/components/schemas/Organization'
        metadata:
          $ref: '#/components/schemas/ApiMetadata'

    OrganizationListResponse:
      type: object
      properties:
        apiVersion: { type: string }
        kind: { type: string, enum: [ORGANIZATION] }
        data:
          type: array
          items:
            $ref: '#/components/schemas/Organization'
        pagination:
          $ref: '#/components/schemas/Pagination'
        metadata:
          $ref: '#/components/schemas/ApiMetadata'

    OrganizationUserMembershipResponse:
      type: object
      properties:
        apiVersion: { type: string }
        kind: { type: string, enum: [ORGANIZATION_USER] }
        data:
          $ref: '#/components/schemas/OrganizationUserMembership'
        metadata:
          $ref: '#/components/schemas/ApiMetadata'

    OrganizationUserMembershipListResponse:
      type: object
      properties:
        apiVersion: { type: string }
        kind: { type: string, enum: [ORGANIZATION_USER] }
        data:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationUserMembership'
        metadata:
          $ref: '#/components/schemas/ApiMetadata'

    OrganizationTypeResponse:
      type: object
      properties:
        apiVersion: { type: string }
        kind: { type: string, enum: [ORGANIZATION_TYPE] }
        data:
          $ref: '#/components/schemas/OrganizationType'
        metadata:
          $ref: '#/components/schemas/ApiMetadata'

    OrganizationTypeListResponse:
      type: object
      properties:
        apiVersion: { type: string }
        kind: { type: string, enum: [ORGANIZATION_TYPE] }
        data:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationType'
        pagination:
          $ref: '#/components/schemas/Pagination'
        metadata:
          $ref: '#/components/schemas/ApiMetadata'

    LocationResponse:
      type: object
      properties:
        apiVersion: { type: string }
        kind: { type: string, enum: [LOCATION] }
        data:
          $ref: '#/components/schemas/Location'
        metadata:
          $ref: '#/components/schemas/ApiMetadata'

    LocationListResponse:
      type: object
      properties:
        apiVersion: { type: string }
        kind: { type: string, enum: [LOCATION] }
        data:
          type: array
          items:
            $ref: '#/components/schemas/Location'
        pagination:
          $ref: '#/components/schemas/Pagination'
        metadata:
          $ref: '#/components/schemas/ApiMetadata'

    AddressComponentResponse:
      type: object
      properties:
        apiVersion: { type: string }
        kind: { type: string, enum: [ADDRESS_COMPONENT] }
        data:
          $ref: '#/components/schemas/AddressComponent'
        metadata:
          $ref: '#/components/schemas/ApiMetadata'

    AddressComponentListResponse:
      type: object
      properties:
        apiVersion: { type: string }
        kind: { type: string, enum: [ADDRESS_COMPONENT] }
        data:
          type: array
          items:
            $ref: '#/components/schemas/AddressComponent'
        pagination:
          $ref: '#/components/schemas/Pagination'
        metadata:
          $ref: '#/components/schemas/ApiMetadata'

    LocationAddressComponentResponse:
      type: object
      properties:
        apiVersion: { type: string }
        kind: { type: string, enum: [ADDRESS_COMPONENT] }
        data:
          $ref: '#/components/schemas/LocationAddressComponent'
        metadata:
          $ref: '#/components/schemas/ApiMetadata'

    LocationAddressComponentListResponse:
      type: object
      properties:
        apiVersion: { type: string }
        kind: { type: string, enum: [ADDRESS_COMPONENT] }
        data:
          type: array
          items:
            $ref: '#/components/schemas/LocationAddressComponent'
        pagination:
          $ref: '#/components/schemas/Pagination'
        metadata:
          $ref: '#/components/schemas/ApiMetadata'
    Property:
      type: object
      properties:
        id:
          type: string
        code:
          type: string
          nullable: true
        name:
          type: string
        type:
          type: string
        description:
          type: string
          nullable: true
        organization:
          $ref: '#/components/schemas/Organization'
        isActive:
          type: boolean
        isListed:
          type: boolean

    Pagination:
      type: object
      properties:
        page: { type: integer }
        limit: { type: integer }
        total: { type: integer }
        totalPages: { type: integer }

    ApiMetadata:
      type: object
      properties:
        correlationId: { type: string }
        message: { type: string, nullable: true }

    PropertyUnit:
      type: object
      properties:
        id: { type: string }
        unitNumber: { type: string }
        name: { type: string, nullable: true }
        floor: { type: string, nullable: true }
        area: { type: number, nullable: true }
        description: { type: string, nullable: true }
        isActive: { type: boolean }
        isListed: { type: boolean }
        metadata: { type: object, nullable: true }
        property:
          $ref: '#/components/schemas/Property'
        tenant:
          $ref: '#/components/schemas/User'

    UnitTenant:
      type: object
      properties:
        id: { type: string }
        status:
          type: string
          enum: [active, pending, past, evicted, rejected]
        moveInDate: { type: string, format: date, nullable: true }
        moveOutDate: { type: string, format: date, nullable: true }
        kyc: { type: object, nullable: true }
        metadata: { type: object, nullable: true }
        property:
          $ref: '#/components/schemas/Property'
        unit:
          $ref: '#/components/schemas/PropertyUnit'
        user:
          $ref: '#/components/schemas/User'

    Lease:
      type: object
      properties:
        id: { type: string }
        startDate: { type: string, format: date }
        endDate: { type: string, format: date }
        amount: { type: number }
        status:
          type: string
          enum: [pending, active, terminated, expired, suspended]
        esignatures:
          type: array
          items:
            type: object
        signedDocumentUrl: { type: string, nullable: true }
        contractHash: { type: string, nullable: true }
        terms: { type: object, nullable: true }
        unit:
          $ref: '#/components/schemas/PropertyUnit'
        tenant:
          $ref: '#/components/schemas/UnitTenant'
        landlord:
          type: object
          properties:
            id: { type: string }

    LeasePayment:
      type: object
      properties:
        id: { type: string }
        amount: { type: number }
        currency: { type: string }
        paidAt: { type: string, format: date-time }
        metadata: { type: object, nullable: true }
        lease:
          $ref: '#/components/schemas/Lease'
        tenant:
          $ref: '#/components/schemas/UnitTenant'
        organization:
          $ref: '#/components/schemas/Organization'
        type:
          type: object
          properties:
            id: { type: string }
            code: { type: string }

    PropertyUnitResponse:
      type: object
      properties:
        apiVersion: { type: string }
        kind: { type: string }
        data:
          $ref: '#/components/schemas/PropertyUnit'
        pagination:
          $ref: '#/components/schemas/Pagination'
        metadata:
          $ref: '#/components/schemas/ApiMetadata'
      example:
        apiVersion: '1'
        kind: PROPERTY_UNIT
        data:
          id: '9a1e8c18-0c34-4e0b-9f2c-5f2e4b0f1f0a'
          unitNumber: 'A-101'
          name: 'Penthouse'
          floor: '10'
          area: 120
          description: 'Sea view'
          isActive: true
          isListed: true
          metadata: { view: 'ocean' }
          property:
            id: 'prop-123'
            name: 'Sunset Towers'
          tenant:
            id: 'user-111'
            firstName: 'Jane'
            lastName: 'Doe'
        metadata:
          correlationId: 'abc-123'

    PropertyUnitListResponse:
      allOf:
        - $ref: '#/components/schemas/PropertyUnitResponse'
      example:
        apiVersion: '1'
        kind: PROPERTY_UNIT
        data:
          - id: '9a1e8c18-0c34-4e0b-9f2c-5f2e4b0f1f0a'
            unitNumber: 'A-101'
            isActive: true
            isListed: true
          - id: '8b1e8c18-0c34-4e0b-9f2c-5f2e4b0f1f0b'
            unitNumber: 'A-102'
            isActive: true
            isListed: false
        pagination:
          page: 1
          limit: 10
          total: 2
          totalPages: 1
        metadata:
          correlationId: 'abc-123'

    UnitTenantResponse:
      type: object
      properties:
        apiVersion: { type: string }
        kind: { type: string }
        data:
          $ref: '#/components/schemas/UnitTenant'
        metadata:
          $ref: '#/components/schemas/ApiMetadata'
      example:
        apiVersion: '1'
        kind: UNIT_TENANT
        data:
          id: 'ten-001'
          status: active
          user: { id: 'user-111', firstName: 'Jane', lastName: 'Doe' }
          unit: { id: 'unit-001', unitNumber: 'A-101' }
          property: { id: 'prop-123', name: 'Sunset Towers' }
        metadata: { correlationId: 'abc-123' }

    UnitTenantListResponse:
      allOf:
        - $ref: '#/components/schemas/UnitTenantResponse'
      example:
        apiVersion: '1'
        kind: UNIT_TENANT
        data:
          - { id: 'ten-001', status: active }
          - { id: 'ten-002', status: pending }
        metadata: { correlationId: 'abc-123' }

    LeaseResponse:
      type: object
      properties:
        apiVersion: { type: string }
        kind: { type: string }
        data:
          $ref: '#/components/schemas/Lease'
        metadata:
          $ref: '#/components/schemas/ApiMetadata'

    LeasePaymentResponse:
      type: object
      properties:
        apiVersion: { type: string }
        kind: { type: string }
        data:
          $ref: '#/components/schemas/LeasePayment'
        metadata:
          $ref: '#/components/schemas/ApiMetadata'

    LeasePaymentListResponse:
      allOf:
        - $ref: '#/components/schemas/LeasePaymentResponse'

paths:
  /auth/login:
    post:
      tags: [Auth]
      summary: Login and get tokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [identifier, credential]
              properties:
                identifier:
                  type: string
                credential:
                  type: string
      responses:
        '200':
          description: Tokens issued
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/AuthTokens'
        '401': { description: Invalid credentials }
  /auth/me:
    post:
      tags: [Auth]
      summary: Get current user profile
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: Profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  data:
                    $ref: '#/components/schemas/AuthProfile'
        '401': { description: Unauthorized }
    get:
      tags: [Auth]
      summary: Get current user profile
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: Profile
        '401': { description: Unauthorized }
  /auth/validate:
    post:
      tags: [Auth]
      summary: Validate an access or refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [token, type]
              properties:
                token: { type: string }
                type: { type: string, enum: [access, refresh] }
      responses:
        '200': { description: Result }
  /auth/refresh:
    post:
      tags: [Auth]
      summary: Refresh access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [refreshToken]
              properties:
                refreshToken: { type: string }
      responses:
        '200': { description: New access token }
  /auth/logout:
    post:
      tags: [Auth]
      summary: Logout by revoking refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [refreshToken]
              properties:
                refreshToken: { type: string }
      responses:
        '200': { description: Logged out }

  /users:
    post:
      tags: [Users]
      summary: Create user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, phone, firstName, lastName]
              properties:
                email: { type: string }
                phone: { type: string }
                firstName: { type: string }
                lastName: { type: string }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyUnitResponse'
    get:
      tags: [Users]
      summary: List users (paginated)
      responses:
        '200': { description: OK }
  /users/register:
    post:
      tags: [Users]
      summary: Self-register user
      responses:
        '201': { description: Registered }
  /users/{userId}:
    get:
      tags: [Users]
      summary: Get user by id
      parameters:
        - in: path
          name: userId
          required: true
          schema: { type: string, minLength: 1 }
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404': { description: Not found }
    put:
      tags: [Users]
      summary: Update user
      parameters:
        - in: path
          name: userId
          required: true
          schema: { type: string, minLength: 1 }
      responses:
        '200': { description: Updated }
    delete:
      tags: [Users]
      summary: Delete user
      parameters:
        - in: path
          name: userId
          required: true
          schema: { type: string, minLength: 1 }
      responses:
        '204': { description: Deleted }
  /users/email:
    get:
      tags: [Users]
      summary: Get user by email
      parameters:
        - in: query
          name: email
          schema: { type: string, minLength: 1 }
          required: true
      responses:
        '200': { description: OK }
  /users/{userId}/roles:
    post:
      tags: [Users]
      summary: Assign a role to user
      parameters:
        - in: path
          name: userId
          required: true
          schema: { type: string, minLength: 1 }
      responses:
        '200': { description: Added }
    get:
      tags: [Users]
      summary: List user roles
      parameters:
        - in: path
          name: userId
          required: true
          schema: { type: string, minLength: 1 }
      responses:
        '200': { description: OK }
    delete:
      tags: [Users]
      summary: Remove all user roles
      parameters:
        - in: path
          name: userId
          required: true
          schema: { type: string, minLength: 1 }
      responses:
        '200': { description: Removed }
  /users/{userId}/roles/{roleId}:
    delete:
      tags: [Users]
      summary: Remove specific user role
      parameters:
        - in: path
          name: userId
          required: true
          schema: { type: string, minLength: 1 }
        - in: path
          name: roleId
          required: true
          schema: { type: string, minLength: 1 }
      responses:
        '200': { description: Removed }
  /users/{userId}/organizations:
    get:
      tags: [Users]
      summary: List organizations a user belongs to
      parameters:
        - in: path
          name: userId
          required: true
          schema: { type: string, minLength: 1 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationListResponse'

  /organizations:
    post:
      tags: [Organizations]
      summary: Create organization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name: { type: string, maxLength: 100 }
                description: { type: string, maxLength: 500, nullable: true }
                typeId: { type: string, nullable: true }
                config: { type: object, nullable: true }
                metadata: { type: object, nullable: true }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationResponse'
    get:
      tags: [Organizations]
      summary: List organizations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationListResponse'
  /organizations/{id}:
    get:
      tags: [Organizations]
      summary: Get organization by id
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, minLength: 1 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationResponse'
    put:
      tags: [Organizations]
      summary: Update organization
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, minLength: 1 }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string, maxLength: 100 }
                description: { type: string, maxLength: 500, nullable: true }
                config: { type: object, nullable: true }
                metadata: { type: object, nullable: true }
      responses:
        '200': { description: Updated }
    delete:
      tags: [Organizations]
      summary: Delete organization
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, minLength: 1 }
      responses:
        '204': { description: Deleted }
  /organizations/{id}/soft-delete:
    patch:
      tags: [Organizations]
      summary: Soft delete organization
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, minLength: 1 }
      responses:
        '204': { description: Soft-deleted }
  /organizations/{id}/restore:
    patch:
      tags: [Organizations]
      summary: Restore organization
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, minLength: 1 }
      responses:
        '200': { description: Restored }
  /organizations/{id}/with-relations:
    get:
      tags: [Organizations]
      summary: Get organization with relations
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, minLength: 1 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationResponse'

  /organizations/{organizationId}/users:
    post:
      tags: [Org Memberships]
      summary: Create or merge membership with roles
      parameters:
        - in: path
          name: organizationId
          required: true
          schema: { type: string, minLength: 1 }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [userId]
              properties:
                userId: { type: string }
                roles:
                  type: array
                  items:
                    type: string
                status: { type: string }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationUserMembershipResponse'
    get:
      tags: [Org Memberships]
      summary: List organization users/memberships
      parameters:
        - in: path
          name: organizationId
          required: true
          schema: { type: string, minLength: 1 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationUserMembershipListResponse'
  /organizations/{organizationId}/users/{userId}:
    get:
      tags: [Org Memberships]
      summary: Get membership by org and user
      parameters:
        - in: path
          name: organizationId
          required: true
          schema: { type: string, minLength: 1 }
        - in: path
          name: userId
          required: true
          schema: { type: string, minLength: 1 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationUserMembershipResponse'
    delete:
      tags: [Org Memberships]
      summary: Soft delete membership
      parameters:
        - $ref: '#/paths/~1organizations~1{organizationId}~1users~1{userId}/get/parameters/0'
        - $ref: '#/paths/~1organizations~1{organizationId}~1users~1{userId}/get/parameters/1'
      responses:
        '204': { description: Deleted }
  /organizations/{organizationId}/users/{userId}/restore:
    post:
      tags: [Org Memberships]
      summary: Restore membership
      parameters:
        - $ref: '#/paths/~1organizations~1{organizationId}~1users~1{userId}/get/parameters/0'
        - $ref: '#/paths/~1organizations~1{organizationId}~1users~1{userId}/get/parameters/1'
      responses:
        '200': { description: Restored }
  /organizations/{organizationId}/users/{userId}/status:
    patch:
      tags: [Org Memberships]
      summary: Update membership status
      parameters:
        - $ref: '#/paths/~1organizations~1{organizationId}~1users~1{userId}/get/parameters/0'
        - $ref: '#/paths/~1organizations~1{organizationId}~1users~1{userId}/get/parameters/1'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status: { type: string }
      responses:
        '200': { description: Updated }
  /organizations/{organizationId}/users/{userId}/roles:
    put:
      tags: [Org Memberships]
      summary: Replace roles exactly
      parameters:
        - $ref: '#/paths/~1organizations~1{organizationId}~1users~1{userId}/get/parameters/0'
        - $ref: '#/paths/~1organizations~1{organizationId}~1users~1{userId}/get/parameters/1'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [roles]
              properties:
                roles:
                  type: array
                  items: { type: string }
      responses:
        '200': { description: Replaced }
    patch:
      tags: [Org Memberships]
      summary: Remove specific roles
      parameters:
        - $ref: '#/paths/~1organizations~1{organizationId}~1users~1{userId}/get/parameters/0'
        - $ref: '#/paths/~1organizations~1{organizationId}~1users~1{userId}/get/parameters/1'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [roles]
              properties:
                roles:
                  type: array
                  items: { type: string }
      responses:
        '200': { description: Removed }
  /organizations/org-users/{id}:
    get:
      tags: [Org Memberships]
      summary: Get membership by row id
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, minLength: 1 }
      responses:
        '200': { description: OK }

  # ---- Organization Types ----
  /organization-types:
    post:
      tags: [Organizations]
      summary: Create organization type
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name: { type: string, maxLength: 50 }
                description: { type: string, nullable: true }
                isActive: { type: boolean }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationTypeResponse'
    get:
      tags: [Organizations]
      summary: List organization types
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationTypeListResponse'
  /organization-types/{id}:
    get:
      tags: [Organizations]
      summary: Get organization type by id
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, minLength: 1 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationTypeResponse'
    put:
      tags: [Organizations]
      summary: Update organization type
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, minLength: 1 }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string, maxLength: 50 }
                description: { type: string, nullable: true }
                isActive: { type: boolean }
      responses:
        '200':
          description: Updated
    delete:
      tags: [Organizations]
      summary: Delete organization type
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, minLength: 1 }
      responses:
        '204': { description: Deleted }
  /organization-types/name:
    get:
      tags: [Organizations]
      summary: Get organization type by name
      parameters:
        - in: query
          name: name
          required: true
          schema: { type: string, minLength: 1 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationTypeResponse'
  /organization-types/status/active:
    get:
      tags: [Organizations]
      summary: List active organization types
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationTypeListResponse'

  /properties:
    post:
      tags: [Properties]
      summary: Create property (requires org role)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [code, name, type, organizationId]
              properties:
                code: { type: string }
                name: { type: string }
                type: { type: string }
                description: { type: string }
                organizationId: { type: string }
      responses:
        '201': { description: Created }
    get:
      tags: [Properties]
      summary: List properties (paginated)
      responses:
        '200': { description: OK }
  /properties/{id}:
    get:
      tags: [Properties]
      summary: Get property by id
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, minLength: 1 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
    put:
      tags: [Properties]
      summary: Update property (requires org role)
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, minLength: 1 }
      responses:
        '200': { description: Updated }
  /properties/code/{code}:
    get:
      tags: [Properties]
      summary: Get property by code
      parameters:
        - in: path
          name: code
          required: true
          schema: { type: string, minLength: 1 }
      responses:
        '200': { description: OK }
  /properties/my-orgs:
    get:
      tags: [Properties]
      summary: List properties for caller's organizations
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: orgIds
          schema: { type: string }
          description: Comma-separated organization IDs (must be subset of token claims)
      responses:
        '200': { description: OK }

  # ---- Property Units ----
  /properties/{propertyId}/units:
    post:
      tags: [Property Units]
      summary: Create a unit under a property
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: propertyId
          required: true
          schema: { type: string, minLength: 1 }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [unitNumber]
              properties:
                unitNumber: { type: string, maxLength: 32 }
                name: { type: string, maxLength: 64 }
                floor: { type: string, maxLength: 32 }
                area: { type: number }
                description: { type: string }
                isListed: { type: boolean }
                metadata: { type: object }
            example:
              unitNumber: "A-101"
              name: "Penthouse"
              floor: "10"
              area: 120
              description: "Sea view"
              isListed: true
              metadata: { view: "ocean" }
      responses:
        '201': { description: Created }
    get:
      tags: [Property Units]
      summary: List units for a property
      parameters:
        - in: path
          name: propertyId
          required: true
          schema: { type: string }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1 }
        - in: query
          name: orderBy
          schema: { type: string, enum: [unitNumber, name, createdAt] }
        - in: query
          name: orderDir
          schema: { type: string, enum: [ASC, DESC] }
        - in: query
          name: search
          schema: { type: string }
        - in: query
          name: onlyListed
          schema: { type: boolean }
        - in: query
          name: onlyAvailable
          schema: { type: boolean }
        - in: query
          name: onlyOccupied
          schema: { type: boolean }
        - in: query
          name: includeLeases
          schema: { type: boolean }
        - in: query
          name: includeRequests
          schema: { type: boolean }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyUnitListResponse'
  /properties/{propertyId}/units/available:
    get:
      tags: [Property Units]
      summary: List available units for a property
      parameters:
        - in: path
          name: propertyId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyUnitListResponse'
  /properties/{propertyId}/units/occupied:
    get:
      tags: [Property Units]
      summary: List occupied units for a property
      parameters:
        - in: path
          name: propertyId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyUnitListResponse'
  /properties/{propertyId}/units/number/{unitNumber}:
    get:
      tags: [Property Units]
      summary: Get unit by number
      parameters:
        - in: path
          name: propertyId
          required: true
          schema: { type: string }
        - in: path
          name: unitNumber
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyUnitResponse'
  /properties/{propertyId}/units/{id}:
    put:
      tags: [Properties]
      summary: Update a unit
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: propertyId
          required: true
          schema: { type: string }
        - in: path
          name: id
          required: true
          schema: { type: string, minLength: 1 }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                unitNumber: { type: string }
                name: { type: string }
                floor: { type: string }
                area: { type: number }
                description: { type: string }
                isListed: { type: boolean }
                metadata: { type: object }
                tenantId: { type: string, nullable: true }
      responses:
        '200': { description: Updated }
  /properties/{propertyId}/units/search:
    get:
      tags: [Property Units]
      summary: Search units
      parameters:
        - in: path
          name: propertyId
          required: true
          schema: { type: string }
        - in: query
          name: query
          required: true
          schema: { type: string }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyUnitListResponse'

  # ---- Unit Tenants ----
  /properties/{propertyId}/units/{unitId}/tenants:
    post:
      tags: [Properties]
      summary: Assign a tenant to a unit
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: propertyId
          required: true
          schema: { type: string }
        - in: path
          name: unitId
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [userId, status]
              properties:
                userId: { type: string }
                status: { type: string, enum: [active, pending, past, evicted] }
                kyc: { type: object }
            example:
              userId: "user-111"
              status: "active"
              kyc: { idNumber: "A1234567" }
      responses:
        '201': { description: Created }
    get:
      tags: [Properties]
      summary: List tenants for a unit
      parameters:
        - in: path
          name: propertyId
          required: true
          schema: { type: string }
        - in: path
          name: unitId
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
  /properties/{propertyId}/units/{unitId}/tenants/active:
    get:
      tags: [Properties]
      summary: Get active tenant for a unit
      parameters:
        - in: path
          name: propertyId
          required: true
          schema: { type: string }
        - in: path
          name: unitId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitTenantResponse'
  /properties/{propertyId}/units/{unitId}/tenants/{id}:
    put:
      tags: [Properties]
      summary: Update a unit tenancy
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: propertyId
          required: true
          schema: { type: string }
        - in: path
          name: unitId
          required: true
          schema: { type: string }
        - in: path
          name: id
          required: true
          schema: { type: string, minLength: 1 }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status: { type: string, enum: [active, pending, past, evicted] }
                kyc: { type: object }
      responses:
        '200': { description: Updated }
    delete:
      tags: [Properties]
      summary: Delete a unit tenancy
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: propertyId
          required: true
          schema: { type: string }
        - in: path
          name: unitId
          required: true
          schema: { type: string }
        - in: path
          name: id
          required: true
          schema: { type: string, minLength: 1 }
      responses:
        '204': { description: Deleted }
  /properties/{propertyId}/units/{unitId}/tenants/status/{status}:
    get:
      tags: [Properties]
      summary: List tenants by status for property
      parameters:
        - in: path
          name: propertyId
          required: true
          schema: { type: string }
        - in: path
          name: unitId
          required: true
          schema: { type: string }
        - in: path
          name: status
          required: true
          schema: { type: string, enum: [active, pending, past, evicted] }
      responses:
        '200': { description: OK }

  # ---- Leases & Payments ----
  /properties/{propertyId}/leases:
    post:
      tags: [Properties]
      summary: Create lease agreement
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: propertyId
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [unitId, tenantId, landlordId, startDate, endDate, amount]
              properties:
                unitId: { type: string }
                tenantId: { type: string }
                landlordId: { type: string }
                startDate: { type: string, format: date-time }
                endDate: { type: string, format: date-time }
                amount: { type: number }
                status: { type: string, enum: [pending, active, terminated, expired] }
                esignatures: { type: array, items: { type: object } }
                signedDocumentUrl: { type: string }
                contractHash: { type: string }
                terms: { type: object }
            example:
              unitId: "unit-001"
              tenantId: "ten-001"
              landlordId: "owner-001"
              startDate: "2025-01-01T00:00:00Z"
              endDate: "2025-12-31T00:00:00Z"
              amount: 500
              status: "active"
              terms: { lateFee: 50 }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaseResponse'
  /properties/{propertyId}/leases/{id}:
    get:
      tags: [Properties]
      summary: Get lease by id
      parameters:
        - in: path
          name: propertyId
          required: true
          schema: { type: string }
        - in: path
          name: id
          required: true
          schema: { type: string, minLength: 1 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaseResponse'
    put:
      tags: [Properties]
      summary: Update lease agreement
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: propertyId
          required: true
          schema: { type: string }
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                startDate: { type: string, format: date-time }
                endDate: { type: string, format: date-time }
                amount: { type: number }
                status: { type: string, enum: [pending, active, terminated, expired] }
                esignatures: { type: array, items: { type: object } }
                signedDocumentUrl: { type: string }
                contractHash: { type: string }
                terms: { type: object }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaseResponse'
    delete:
      tags: [Properties]
      summary: Delete lease agreement
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: propertyId
          required: true
          schema: { type: string }
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '204': { description: Deleted }
  /properties/{propertyId}/leases/{leaseId}/payments:
    post:
      tags: [Payments]
      summary: Record lease payment
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: propertyId
          required: true
          schema: { type: string }
        - in: path
          name: leaseId
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [tenantId, amount, paidAt, typeCode]
              properties:
                tenantId: { type: string }
                amount: { type: number }
                paidAt: { type: string, format: date-time }
                typeCode: { type: string }
                metadata: { type: object }
            example:
              tenantId: "ten-001"
              amount: 500
              paidAt: "2025-01-05T10:00:00Z"
              typeCode: "rent"
              metadata: { method: "mpesa" }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeasePaymentResponse'
    get:
      tags: [Payments]
      summary: List payments for lease
      parameters:
        - in: path
          name: propertyId
          required: true
          schema: { type: string }
        - in: path
          name: leaseId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeasePaymentListResponse'
  /properties/{propertyId}/leases/{leaseId}/payments/{id}:
    put:
      tags: [Payments]
      summary: Update lease payment
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: propertyId
          required: true
          schema: { type: string }
        - in: path
          name: leaseId
          required: true
          schema: { type: string }
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount: { type: number }
                paidAt: { type: string, format: date-time }
                metadata: { type: object }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeasePaymentResponse'
  /properties/{propertyId}/leases/{leaseId}/payments/range:
    get:
      tags: [Payments]
      summary: List payments in date range for lease
      parameters:
        - in: path
          name: propertyId
          required: true
          schema: { type: string }
        - in: path
          name: leaseId
          required: true
          schema: { type: string }
        - in: query
          name: start
          required: true
          schema: { type: string, format: date-time }
        - in: query
          name: end
          required: true
          schema: { type: string, format: date-time }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeasePaymentListResponse'

  # ---- Locations ----
  /locations:
    post:
      tags: [Locations]
      summary: Create location
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [localAreaName, county]
              properties:
                localAreaName: { type: string, maxLength: 128 }
                county: { type: string, maxLength: 128 }
                town: { type: string, maxLength: 128, nullable: true }
                street: { type: string, maxLength: 128, nullable: true }
                coverageDetails: { type: string, maxLength: 1024, nullable: true }
                parentId: { type: string, nullable: true }
                centerPoint:
                  anyOf:
                    - type: object
                      properties:
                        type: { type: string, enum: [Point] }
                        coordinates:
                          type: array
                          items: { type: number }
                          minItems: 2
                          maxItems: 2
                    - type: object
                      properties:
                        lat: { type: number }
                        lng: { type: number }
                geofence:
                  type: object
                  properties:
                    type: { type: string, enum: [Polygon] }
                    coordinates:
                      type: array
                      items:
                        type: array
                        items:
                          type: array
                          items: { type: number }
                metadata: { type: object, nullable: true }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationResponse'
    get:
      tags: [Locations]
      summary: List locations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationListResponse'
  /locations/{locationId}:
    get:
      tags: [Locations]
      summary: Get location by id
      parameters:
        - in: path
          name: locationId
          required: true
          schema: { type: string, minLength: 1 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationResponse'
    put:
      tags: [Locations]
      summary: Update location
      parameters:
        - in: path
          name: locationId
          required: true
          schema: { type: string, minLength: 1 }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                localAreaName: { type: string, maxLength: 128 }
                county: { type: string, maxLength: 128 }
                town: { type: string, maxLength: 128, nullable: true }
                street: { type: string, maxLength: 128, nullable: true }
                coverageDetails: { type: string, maxLength: 1024, nullable: true }
                parentId: { type: string, nullable: true }
                centerPoint:
                  anyOf:
                    - type: object
                      properties:
                        type: { type: string, enum: [Point] }
                        coordinates:
                          type: array
                          items: { type: number }
                          minItems: 2
                          maxItems: 2
                    - type: object
                      properties:
                        lat: { type: number }
                        lng: { type: number }
                    - type: 'null'
                geofence:
                  anyOf:
                    - type: object
                      properties:
                        type: { type: string, enum: [Polygon] }
                        coordinates:
                          type: array
                          items:
                            type: array
                            items:
                              type: array
                              items: { type: number }
                    - type: 'null'
                clearCenterPoint: { type: boolean }
                clearGeofence: { type: boolean }
                metadata: { type: object, nullable: true }
      responses:
        '200': { description: Updated }
    delete:
      tags: [Locations]
      summary: Delete location
      parameters:
        - in: path
          name: locationId
          required: true
          schema: { type: string, minLength: 1 }
      responses:
        '204': { description: Deleted }
  /locations/{locationId}/move:
    post:
      tags: [Locations]
      summary: Move location to new parent
      parameters:
        - in: path
          name: locationId
          required: true
          schema: { type: string, minLength: 1 }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [newParentId]
              properties:
                newParentId:
                  anyOf:
                    - { type: string }
                    - { type: 'null' }
      responses:
        '200': { description: Moved }
  /locations/{locationId}/children:
    get:
      tags: [Locations]
      summary: Get direct children
      parameters:
        - in: path
          name: locationId
          required: true
          schema: { type: string, minLength: 1 }
      responses:
        '200': { description: OK }
  /locations/{locationId}/ancestors:
    get:
      tags: [Locations]
      summary: Get ancestors
      parameters:
        - in: path
          name: locationId
          required: true
          schema: { type: string, minLength: 1 }
      responses:
        '200': { description: OK }
  /locations/{locationId}/descendants:
    get:
      tags: [Locations]
      summary: Get descendants
      parameters:
        - in: path
          name: locationId
          required: true
          schema: { type: string, minLength: 1 }
      responses:
        '200': { description: OK }

  # ---- Address Components ----
  /locations/address/components:
    get:
      tags: [Address Components]
      summary: Search & paginate address components
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressComponentListResponse'
    post:
      tags: [Address Components]
      summary: Create address component
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [type, value]
              properties:
                type: { type: string, maxLength: 64 }
                value: { type: string, maxLength: 256 }
                parentId: { type: string, nullable: true }
                metadata: { type: object, nullable: true }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressComponentResponse'
  /locations/address/components/{id}:
    get:
      tags: [Address Components]
      summary: Get address component by id
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressComponentResponse'
    put:
      tags: [Address Components]
      summary: Update address component
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, minLength: 1 }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type: { type: string, maxLength: 64 }
                value: { type: string, maxLength: 256 }
                parentId: { type: string, nullable: true }
                metadata: { type: object, nullable: true }
      responses:
        '200': { description: Updated }
    delete:
      tags: [Address Components]
      summary: Delete address component
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '204': { description: Deleted }
  /locations/address/components/by/type-value:
    get:
      tags: [Address Components]
      summary: Get component by (type, value)
      parameters:
        - in: query
          name: type
          required: true
          schema: { type: string, minLength: 1 }
        - in: query
          name: value
          required: true
          schema: { type: string, minLength: 1 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressComponentResponse'
  /locations/address/components/types:
    get:
      tags: [Address Components]
      summary: List components by types
      parameters:
        - in: query
          name: types
          required: true
          schema:
            type: array
            items: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressComponentListResponse'
  /locations/address/components/location/{locationId}:
    get:
      tags: [Address Components]
      summary: Get components linked to a location
      parameters:
        - in: path
          name: locationId
          required: true
          schema: { type: string, minLength: 1 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressComponentListResponse'
  /locations/address/components/upsert:
    put:
      tags: [Address Components]
      summary: Upsert by (type, value, parent)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [type, value]
              properties:
                type: { type: string, maxLength: 64 }
                value: { type: string, maxLength: 256 }
                parentId: { type: string, nullable: true }
                metadata: { type: object, nullable: true }
      responses:
        '200':
          description: Upserted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressComponentResponse'

  # ---- Location-Address Links ----
  /locations/components:
    post:
      tags: [Location-Address Links]
      summary: Create a location-address component link
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [locationId, addressComponentId]
              properties:
                locationId: { type: string }
                addressComponentId: { type: string }
                label: { type: string, nullable: true }
                sequence: { type: integer, nullable: true }
                isPrimary: { type: boolean, nullable: true }
                centerPoint:
                  anyOf:
                    - type: object
                      properties:
                        type: { type: string, enum: [Point] }
                        coordinates:
                          type: array
                          items: { type: number }
                          minItems: 2
                          maxItems: 2
                    - type: 'null'
                metadata: { type: object, nullable: true }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationAddressComponentResponse'
  /locations/components/{id}:
    get:
      tags: [Location-Address Links]
      summary: Get link by id
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationAddressComponentResponse'
    put:
      tags: [Location-Address Links]
      summary: Update link
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, minLength: 1 }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                locationId: { type: string }
                addressComponentId: { type: string }
                label: { type: string, nullable: true }
                sequence: { type: integer, nullable: true }
                isPrimary: { type: boolean, nullable: true }
                centerPoint:
                  anyOf:
                    - type: object
                      properties:
                        type: { type: string, enum: [Point] }
                        coordinates:
                          type: array
                          items: { type: number }
                          minItems: 2
                          maxItems: 2
                    - type: 'null'
                metadata: { type: object, nullable: true }
      responses:
        '200': { description: Updated }
    delete:
      tags: [Location-Address Links]
      summary: Delete link
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '204': { description: Deleted }
  /locations/components/near:
    get:
      tags: [Location-Address Links]
      summary: Spatial search near point
      parameters:
        - in: query
          name: lat
          required: true
          schema: { type: number, minimum: -90, maximum: 90 }
        - in: query
          name: lng
          required: true
          schema: { type: number, minimum: -180, maximum: 180 }
        - in: query
          name: distanceMeters
          required: true
          schema: { type: number, minimum: 1 }
        - in: query
          name: limit
          required: false
          schema: { type: integer, minimum: 1 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationAddressComponentListResponse'
  /locations/components/locations/{locationId}:
    get:
      tags: [Location-Address Links]
      summary: List links for a location
      parameters:
        - in: path
          name: locationId
          required: true
          schema: { type: string, minLength: 1 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationAddressComponentListResponse'

  # ---- Payments ----
  /payment-providers:
    post:
      tags: [Payments]
      summary: Create payment provider
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [paymentProviderCode, name]
              properties:
                paymentProviderCode: { type: string, maxLength: 128 }
                name: { type: string, maxLength: 128 }
                metadata: { type: object, nullable: true }
      responses:
        '201': { description: Created }
    get:
      tags: [Payments]
      summary: List payment providers
      responses:
        '200': { description: OK }
  /payment-providers/{code}:
    get:
      tags: [Payments]
      summary: Get provider by code
      parameters:
        - in: path
          name: code
          required: true
          schema: { type: string, minLength: 1 }
      responses:
        '200': { description: OK }
    put:
      tags: [Payments]
      summary: Update provider by code
      parameters:
        - in: path
          name: code
          required: true
          schema: { type: string, minLength: 1 }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string, maxLength: 128 }
                metadata: { type: object, nullable: true }
      responses:
        '200': { description: Updated }
    delete:
      tags: [Payments]
      summary: Delete provider by code
      parameters:
        - in: path
          name: code
          required: true
          schema: { type: string, minLength: 1 }
      responses:
        '204': { description: Deleted }
  /payment-configs/{providerCode}/configs:
    post:
      tags: [Payments]
      summary: Create provider config
      parameters:
        - in: path
          name: providerCode
          required: true
          schema: { type: string, minLength: 1 }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [key, value]
              properties:
                key: { type: string, maxLength: 128 }
                value: {}
                metadata: { type: object, nullable: true }
      responses:
        '201': { description: Created }
    get:
      tags: [Payments]
      summary: List provider configs
      parameters:
        - in: path
          name: providerCode
          required: true
          schema: { type: string, minLength: 1 }
      responses:
        '200': { description: OK }
  /payment-configs/{providerCode}/configs/{key}:
    put:
      tags: [Payments]
      summary: Update provider config by key
      parameters:
        - in: path
          name: providerCode
          required: true
          schema: { type: string, minLength: 1 }
        - in: path
          name: key
          required: true
          schema: { type: string, minLength: 1 }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [value]
              properties:
                value: {}
                metadata: { type: object, nullable: true }
      responses:
        '200': { description: Updated }
    delete:
      tags: [Payments]
      summary: Delete provider config by key
      parameters:
        - in: path
          name: providerCode
          required: true
          schema: { type: string, minLength: 1 }
        - in: path
          name: key
          required: true
          schema: { type: string, minLength: 1 }
      responses:
        '204': { description: Deleted }

  # ---- Files ----
  /files/upload:
    post:
      tags: [Files]
      summary: Upload files
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [provider, category, files]
              properties:
                provider: { type: string }
                category: { type: string }
                files:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '200': { description: Uploaded }
  /files:
    get:
      tags: [Files]
      summary: List files
      security: [{ bearerAuth: [] }]
      responses:
        '200': { description: OK }
    delete:
      tags: [Files]
      summary: Delete a file by body (legacy)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [storageKey, provider]
              properties:
                storageKey: { type: string }
                provider: { type: string }
      responses:
        '200': { description: Deleted }
  /files/signed-url:
    get:
      tags: [Files]
      summary: Get signed URL
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: storageKey
          required: true
          schema: { type: string, minLength: 1 }
        - in: query
          name: provider
          required: true
          schema: { type: string, minLength: 1 }
        - in: query
          name: expiresInSeconds
          required: false
          schema: { type: integer, minimum: 1 }
      responses:
        '200': { description: OK }
  /files/{id}:
    get:
      tags: [Files]
      summary: Get file by id
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
  /files/by-key/{storageKey}:
    delete:
      tags: [Files]
      summary: Delete a file by storage key (preferred)
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: storageKey
          required: true
          schema: { type: string, minLength: 1 }
        - in: query
          name: provider
          required: true
          schema: { type: string, minLength: 1 }
      responses:
        '204': { description: Deleted }

  # ---- SMS ----
  /sms/send:
    post:
      tags: [SMS]
      summary: Send SMS
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [phoneNumber, message]
              properties:
                phoneNumber: { type: string }
                message: { type: string }
                action: { type: string, default: 'generic' }
                options: { type: object, nullable: true }
      responses:
        '200': { description: Sent }
